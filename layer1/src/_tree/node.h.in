typedef struct L (node) node_type;
typedef struct L (visitor) visitor_type;
typedef struct L (vtbl) vtbl_type;
typedef enum L (kind) kind_type;

typedef void fn_destruct (node_type *node);
typedef void fn_print (node_type const *node, FILE *fh);
typedef void fn_store (node_type const *node, FILE *fh, int indent);
typedef void fn_accept (node_type const *node, visitor_type *visitor);

enum L (kind)
{
  U (NODE),

  U (TOKEN),

#include KINDS_H
};


struct L (vtbl)
{
  struct type_info
  {
    vtbl_type const *base;
    char const *name;
    kind_type kind;
    size_t size;
  } ti;
  fn_destruct *destruct;
  fn_print *print;
  fn_store *store;
  fn_accept *accept;
};


struct L (node)
{
  vtbl_type const * const vtbl;
  struct location const location;
  int refcnt;
};


void L (pure_virtual) (void);
bool L (kind_is) (node_type const *object, kind_type kind);
bool L (kind_derived) (node_type const *object, kind_type kind);
node_type *L (cast_mutable) (node_type *object, kind_type kind);
node_type const *L (cast_const) (node_type const *object, kind_type kind);

#define SELF()                  self_type       *self = (self_type       *)L (cast_mutable) (object, vtbl->ti.kind)
#define CONST_SELF()            self_type const *self = (self_type const *)L (cast_const)   (object, vtbl->ti.kind)

#define NEW(class, ...)         ({ self_type *self = alloc (sizeof *self); L (class##_construct) (self, __VA_ARGS__); &self->base; })
#define BASE_CTOR(BASE, ...)    L (BASE##_construct) (&self->base, vtbl, __VA_ARGS__)
#define BASE_DTOR()             self->base.vtbl->ti.base->destruct (&self->base)

/* helper macros */

#define ACCESSOR(base, elem)                    \
node_type *                                     \
L (base##_##elem) (node_type const *object)     \
{                                               \
  CONST_SELF ();                                \
  return self->elem;                            \
}

#define COMPUTE_LOC(start_node, end_node)       \
  do {                                          \
    struct location const *start, *end;         \
    start = L (node_location) (start_node);     \
    end   = L (node_location) (end_node);       \
                                                \
    loc.first_line = start->first_line;         \
    loc.first_column = start->first_column;     \
    loc.last_line = end->last_line;             \
    loc.last_column = end->last_column;         \
  } while (0)

#define INDENT(fh, n)                           \
  do {                                          \
    int i;                                      \
                                                \
    for (i = 0; i < n; i++)                     \
      fputc(' ', fh);                           \
  } while (0)

extern vtbl_type const L (node_vtbl);


void L (node_construct) (node_type *self, vtbl_type const *vtbl, struct location const *loc);

fn_destruct L (node_destruct);

#define L(tok) PASTE (L_TREE, PASTE (_, tok))
#define U(tok) PASTE (U_TREE, PASTE (_, tok))

typedef struct L (node) L (node);
typedef struct L (visitor) L (visitor);

typedef void L (visit_fn) (L (visitor) *self, L (node) const *node);
typedef L (node) *L (accessor_fn) (L (node) const *self);

/*
 * node base
 */

/* call constructor named by string */
L (node)               *L (new)                 (char const *type, L (node) *const *args);

/*
 * refcounting
 */

/*!< Increase refcount. Aborts if @c self is NULL. */
L (node)               *L (node_ref)            (L (node) *self);
/*!< Increase refcount. @c self may be NULL. */
L (node)               *L (node_ref_ornull)     (L (node) *self);
/*!< Decrease refcount. Aborts if @c self is NULL. */
void                    L (node_unref)          (L (node) *self);
/*!< Decrease refcount. @c self may be NULL. */
void                    L (node_unref_ornull)   (L (node) *self);

/* accessors */
struct location const  *L (node_location)       (L (node) const *self);

/* call accessor named by string */
L (node)               *L (node_member)         (L (node) const *self, char const *field);
L (node)               *L (node_path)           (L (node) const *self, char const *path);

/* get array with field names */
char const *const      *L (node_members)        (L (node) const *self);

/* get node type name */
char const             *L (node_type_name)      (L (node) const *self);

/* methods */
void                    L (node_accept)         (L (node) const *self, L (visitor) *visitor);

#!/usr/bin/env perl

use common::sense;

use constant USAGE => "Usage: astgen <rule-file>";

sub usage { "" }

my $rules = do {
   my $file = $ARGV[0]
      or die USAGE;
   require $file
};

sub maybe_open {
   my ($name) = @_;

   open my $fh, ">", $name
      || die "Could not open $name: $!"
         unless -f $name;

   $fh
}

sub gen_header_internal {
   my ($file, $name, $members) = @_;

   my $fh = maybe_open "src/ast/$file.h"
      or return;

   print $fh <<EOF;
struct ast_node_$name
{
  ast_node base;

EOF

   print $fh "  ast_node *$_;\n"
      for @$members;
    
   my $ctor = "void ast_${name}_construct ";
   print $fh <<EOF;
};


extern struct ast_vtbl const ast_${name}_vtbl;


$ctor( struct ast_node_${name} *self
EOF

   print $fh ' ' x (length $ctor) . ", ast_node *$_\n" for @$members;
   print $fh ' ' x (length $ctor) . ");\n";
}


sub gen_header {
   my ($file, $name, $members) = @_;

   my $fh = maybe_open "include/ast/$file.h"
      or return;

   print $fh "/*\n * ";
   print $fh do { my $spaced = $name; $spaced =~ s/_/ /g; $spaced };
   print $fh "\n */\n\n";

   print $fh "/* constructor */\n";
   my $new = "ast_node *ast_${name}_new ";
   if (@{ $members } > 1) {
      print $fh "$new( ";
      print $fh join ' ' x (length $new) . ", ", map { "ast_node *$_\n" } @$members;
      print $fh ' ' x (length $new) . ");\n\n";
   } else {
      print $fh "$new(ast_node *$members->[0]);\n\n";
   }

   print $fh "/* accessors */\n";
   print $fh "ast_node *ast_${name}_$_ (ast_node const *self);\n"
      for @$members;
}


for my $file (sort keys %$rules) {
   #print "  GEN  $file\n";

   gen_header_internal $file, @{ $rules->{$file} };
   gen_header          $file, @{ $rules->{$file} };
}

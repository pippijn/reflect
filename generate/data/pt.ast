# vim:ft=perl

$main::dataname = 'pt';

{
   add => ['lhs','op','rhs'],
   add_assign => ['lhs','op','rhs'],
   address_of => ['op','expr'],
   alignof_type => ['alignof_tok','lbrack','type','rbrack'],
   alignof_var => ['alignof_tok','expr'],
   and_assign => ['lhs','op','rhs'],
   any_word115 => ['n1'],
   any_word116 => ['n1'],
   any_word117 => ['n1'],
   argument_expression_list => [['prev'],['comma'],'expr'],
   array_abstract_declarator => ['lsqbrack',['expr'],'rsqbrack'],
   array_abstract_declarator_list => [['prev'],'decl'],
   array_access => ['lhs','lsqbrack','rhs','rsqbrack'],
   array_labelled_initialised => ['lsqbrack','expr',['dots'],['expr2'],'equals','rsqbrack',['init']],
   asm361 => ['n1','n2','n3','n4'],
   asm_argument => ['target','lbrack','expr','rbrack'],
   asm_argument_list => [['prev'],['comma'],'arg'],
   asm_argument_list_opt362 => ['n1'],
   asm_clobbered_list => [['prev'],['comma'],'clobber'],
   asm_opt359 => ['n1'],
   asm_opt360 => ['n1'],
   asm_statement => ['asm_tok','tquals','lbrack','code',['in_arg_colon'],['in_args'],['out_arg_colon'],['out_args'],['clobber_colon'],['clobbers'],'rbrack','semi'],
   assign => ['lhs','op','rhs'],
   attrib375 => ['n1'],
   attrib376 => ['name'],
   attrib377 => ['name','lbrack','id','rbrack'],
   attrib378 => ['name','lbrack','id','comma','expr','rbrack'],
   attrib379 => ['name','lbrack','expr','rbrack'],
   attribute => ['attribute_tok','lbrack1','lbrack2','attributes','rbrack1','rbrack2'],
   attribute_list373 => ['attrib'],
   attribute_list374 => ['prev','comma','attrib'],
   attributes370 => ['n1'],
   attributes371 => ['n1','n2'],
   attributes_opt368 => ['n1'],
   attributes_opt369 => ['n1'],
   auto_str_class_spec => ['auto_tok'],
   basic_declaration_specifier21 => ['n1','n2'],
   basic_declaration_specifier22 => ['n1','n2'],
   basic_declaration_specifier23 => ['n1','n2'],
   basic_declaration_specifier24 => ['n1','n2'],
   basic_type_specifier41 => [['n1'],'n2'],
   basic_type_specifier42 => ['n1','n2'],
   basic_type_specifier43 => ['n1','n2'],
   bit_field_size => ['colon','expr'],
   bit_field_size_opt330 => ['n1'],
   bit_field_size_opt331 => ['bitfield'],
   bitwise_and => ['lhs','op','rhs'],
   bitwise_negate => ['op','expr'],
   bitwise_or => ['lhs','op','rhs'],
   bitwise_xor => ['lhs','op','rhs'],
   brace_expression => ['lbrack','lbrace',['decls'],'stmts','rbrace','rbrack'],
   bracket_expression => ['lbrack','expr','rbrack'],
   bracketed_initialiser_list => ['lbrack',['list'],['comma'],'rbrack'],
   break_statement => ['break_tok','semi'],
   case_label_statement => ['case_tok','expr','semi'],
   char_constant => ['token'],
   char_type_spec => ['char_tok'],
   clean_postfix_typedef_declarator76 => ['n1','n2','n3'],
   clean_postfix_typedef_declarator77 => ['n1','n2','n3','n4'],
   clean_typedef_declarator73 => ['n1'],
   clean_typedef_declarator74 => ['n1','n2','n3'],
   clean_typedef_declarator75 => ['n1','n2','n3','n4'],
   comma_expression => ['prev','comma','expr'],
   comma_opt340 => ['n1'],
   comma_opt341 => ['comma'],
   complex_type_qualifier => ['n1'],
   compound_literal => ['lbrack','type','rbrack','init_list'],
   compound_statement => ['lbrace',['decls'],['stmts'],'rbrace'],
   const_type_qualifier => ['const_tok'],
   continue_statement => ['continue_tok','semi'],
   declaration1 => ['n1','n2'],
   declaration2 => ['n1','n2'],
   declaration3 => ['n1','n2'],
   declaration4 => ['n1','n2'],
   declaration5 => ['n1','n2','n3'],
   declaration6 => ['n1','n2','n3','n4'],
   declaration7 => ['n1','n2','n3'],
   declaration8 => ['n1','n2','n3','n4'],
   declaration_list => [['prev'],'decl'],
   declaration_qualifier_list31 => ['n1','n2'],
   declaration_qualifier_list32 => ['n1','n2','n3','n4'],
   declaration_qualifier_list33 => ['n1','n2'],
   declarator384 => ['n1','n2'],
   declaring_list10 => ['n1','n2','n3','n4','n5','n6'],
   declaring_list11 => ['n1','n2','n3','n4','n5'],
   declaring_list12 => ['n1','n2','n3','n4','n5','n6'],
   declaring_list13 => ['n1','n2','n3','n4','n5','n6'],
   declaring_list9 => ['n1','n2','n3','n4','n5'],
   default_declaring_list14 => ['n1','n2','n3','n4'],
   default_declaring_list15 => ['n1','n2','n3','n4'],
   default_declaring_list16 => ['n1','n2','n3','n4','n5'],
   default_int => ['n1'],
   default_label_statement => ['default_tok','semi'],
   designated_initialiser => ['dot','id','equals','init'],
   divide => ['lhs','op','rhs'],
   divide_assign => ['lhs','op','rhs'],
   do_statement => ['do_tok','stmt','while_tok','lbrack','cond','rbrack','semi'],
   double_type_spec => ['double_tok'],
   enum_specifier => ['enum_tok',['tag'],['lbrace'],['values'],['comma'],['rbrace']],
   enumerator_list => [['prev'],['comma'],'id','value'],
   enumerator_value_opt338 => ['n1'],
   enumerator_value_opt339 => ['equals','expr'],
   equals => ['lhs','op','rhs'],
   expression_opt250 => ['n1'],
   expression_opt254 => ['n1'],
   expression_statement => ['expr','semi'],
   extern_str_class_spec => ['extern_tok'],
   external_definition385 => ['n1','n2'],
   float_type_spec => ['float_tok'],
   floating_constant => ['token'],
   for_statement => ['for_tok','lbrack','init','init_semi','cond','cond_semi','inc','rbrack','stmt'],
   fullold_function_declarator => ['declarator',['decls']],
   function_call => ['lhs','lbrack',['args'],'rbrack'],
   function_definition => ['declarator','body'],
   function_definition_dqual => ['dqual','declarator','body'],
   function_definition_tqual => ['tqual','declarator','body'],
   gcc_extension386 => ['n1'],
   goto_statement => ['goto_tok','label','semi'],
   greater_than => ['lhs','op','rhs'],
   greater_than_equals => ['lhs','op','rhs'],
   hex_constant => ['token'],
   identifier_list => [['prev'],['comma'],'id'],
   if_statement => ['if_tok','lbrack','cond','rbrack','then_stmt',['else_tok'],['else_stmt']],
   imag_expression => ['op','expr'],
   initialiser121 => ['n1','n2','n3'],
   initialiser_list => [['prev'],['comma'],'init'],
   initialiser_opt118 => ['n1'],
   initialiser_opt119 => ['n1','n2'],
   inline_type_qualifier => ['n1'],
   int_type_spec => ['int_tok'],
   integer_constant => ['token'],
   label_statement => ['label','semi'],
   left_shift_assign => ['lhs','op','rhs'],
   less_than => ['lhs','op','rhs'],
   less_than_equals => ['lhs','op','rhs'],
   logical_and => ['lhs','op','rhs'],
   logical_not => ['op','expr'],
   logical_or => ['lhs','op','rhs'],
   long_type_spec => ['long_tok'],
   modulo => ['lhs','op','rhs'],
   modulo_assign => ['lhs','op','rhs'],
   multiply => ['lhs','op','rhs'],
   multiply_assign => ['lhs','op','rhs'],
   negate => ['op','expr'],
   not_equals => ['lhs','op','rhs'],
   octal_constant => ['token'],
   old_function_declarator102 => ['n1'],
   old_function_declarator103 => ['n1','n2',['n3'],'n4'],
   old_function_definition_dspec => ['dspec','declarator','body'],
   old_function_definition_tspec => ['tspec','declarator','body'],
   or_assign => ['lhs','op','rhs'],
   parameter_declaration139 => ['n1','n2'],
   parameter_declaration140 => ['n1','n2','n3'],
   parameter_declaration141 => ['n1','n2','n3'],
   parameter_declaration142 => ['n1','n2','n3'],
   parameter_declaration143 => ['n1','n2'],
   parameter_declaration144 => ['n1','n2','n3'],
   parameter_declaration145 => ['n1','n2','n3','n4'],
   parameter_declaration146 => ['n1','n2','n3'],
   parameter_declaration153 => ['attrs','dquals','defint'],
   parameter_declaration154 => ['attrs','dquals','defint','decl'],
   parameter_declaration155 => ['attrs','dquals','defint','decl'],
   parameter_declaration156 => ['attrs','tquals','defint'],
   parameter_declaration157 => ['attrs','tquals','defint','decl'],
   parameter_declaration158 => ['attrs','tquals','defint','decl'],
   parameter_list => [['prev'],['comma'],'param'],
   parameter_type_list135 => ['n1',['n2'],['n3']],
   parameter_typedef_declarator70 => ['n1'],
   parameter_typedef_declarator71 => ['n1','n2'],
   parameter_typedef_declarator72 => ['n1'],
   paren_identifier_declarator100 => ['n1'],
   paren_identifier_declarator101 => ['n1','n2','n3'],
   paren_postfix_typedef_declarator65 => ['n1','n2','n3'],
   paren_postfix_typedef_declarator66 => ['n1','n2','n3','n4'],
   paren_postfix_typedef_declarator67 => ['n1','n2','n3','n4'],
   paren_typedef_declarator60 => ['n1'],
   paren_typedef_declarator61 => ['n1','n2','n3'],
   paren_typedef_declarator62 => ['n1','n2','n3','n4','n5'],
   paren_typedef_declarator63 => ['n1','n2','n3','n4','n5','n6'],
   paren_typedef_declarator64 => ['n1','n2','n3','n4'],
   pointer => ['n1','n2',['n3'],['n4']],
   pointer_access => ['lhs','op','member'],
   pointer_dereference => ['op','expr'],
   pointer_type_qualifier_list => [['prev'],'qual'],
   positive => ['op','expr'],
   post_decrement => ['expr','op'],
   post_increment => ['expr','op'],
   postfix_abstract_declarator85 => ['n1','n2','n3'],
   postfix_abstract_declarator86 => ['n1','n2','n3'],
   postfix_abstract_declarator87 => ['n1','n2','n3'],
   postfix_abstract_declarator88 => ['n1','n2','n3','n4'],
   postfix_identifier_declarator97 => ['n1','n2'],
   postfix_identifier_declarator98 => ['n1','n2','n3'],
   postfix_identifier_declarator99 => ['n1','n2','n3','n4'],
   postfix_old_function_declarator105 => ['n1','n2','n3','n4'],
   postfix_old_function_declarator106 => ['n1','n2','n3',['n4']],
   postfixing_abstract_declarator89 => ['n1'],
   postfixing_abstract_declarator90 => ['lbrack',['params'],'rbrack'],
   pre_decrement => ['op','expr'],
   pre_increment => ['op','expr'],
   real_expression => ['op','expr'],
   register_str_class_spec => ['register_tok'],
   restrict_pointer_type_qualifier => ['n1'],
   restrict_type_qualifier => ['n1'],
   return_statement => ['return_tok','expr','semi'],
   right_shift_assign => ['lhs','op','rhs'],
   shift_left => ['lhs','op','rhs'],
   shift_right => ['lhs','op','rhs'],
   short_type_spec => ['short_tok'],
   signer_type_spec => ['signed_tok'],
   simple_paren_typedef_declarator68 => ['n1'],
   simple_paren_typedef_declarator69 => ['n1','n2','n3'],
   sizeof_type => ['op','lbrack','expr','rbrack'],
   sizeof_var => ['op','expr'],
   statement350 => ['n1'],
   statement_list => [['prev'],'stmt'],
   static_str_class_spec => ['static_tok'],
   string_literal_list => [['prev'],'string'],
   struct => ['struct_tok'],
   struct_access => ['lhs','op','member'],
   struct_declaration321 => ['n1','semi'],
   struct_declaration322 => ['n1','semi'],
   struct_declaration382 => ['n1','n2'],
   struct_declaration_list => [['prev'],'attrs','decl'],
   struct_declarator => ['decl','bitfield','attrs'],
   struct_declaring_list325 => ['n1','n2'],
   struct_declaring_list326 => ['n1','n2','n3'],
   struct_declaring_list327 => ['n1','comma','n3'],
   struct_declaring_list392 => ['n1','n2','n3','n4'],
   struct_default_declaring_list323 => ['n1','n2'],
   struct_default_declaring_list324 => ['n1','comma','n3'],
   struct_identifier_declarator => ['decl','bitfield','attrs'],
   struct_or_union_specifier => ['sudcl',['id'],['lbrace'],['fields'],['rbrace']],
   subtract => ['lhs','op','rhs'],
   subtract_assign => ['lhs','op','rhs'],
   sue_declaration_specifier25 => ['n1','n2'],
   sue_declaration_specifier26 => ['n1','n2','n3'],
   sue_declaration_specifier27 => ['n1','n2'],
   sue_type_specifier44 => [['n1'],'n2'],
   sue_type_specifier46 => ['n1','n2'],
   switch_statement => ['switch_tok','lbrack','expr','rbrack','stmt'],
   ternary_op => ['cond','qmark',['then_expr'],'colon','else_expr'],
   translation_unit => [['prev'],'def'],
   type_cast => ['lbrack','type','rbrack','expr'],
   type_name => ['tspec',['decl']],
   type_name151 => ['tquals','defint',['decl']],
   type_qualifier_list => [['prev'],'qual'],
   type_qualifier_opt270 => ['n1'],
   type_qualifier_opt271 => ['n1'],
   type_specifier_nosue387 => ['n1'],
   typedef_declaration_specifier28 => ['n1','n2'],
   typedef_declaration_specifier29 => ['n1','n2'],
   typedef_declaration_specifier30 => ['n1','n2'],
   typedef_str_class_spec => ['typedef_tok'],
   typedef_type_specifier47 => [['n1'],'n2'],
   typedef_type_specifier49 => ['n1','n2'],
   typeof_expression388 => ['n1'],
   typeof_expression389 => ['n1'],
   typeof_type_specifier => [['tquals'],'typeof_tok','lbrack','expr','rbrack'],
   unary_expression383 => ['n1','n2'],
   unary_identifier_declarator94 => ['n1'],
   unary_identifier_declarator95 => ['n1','n2',['n3'],'n4'],
   union => ['union_tok'],
   unsigned_type_spec => ['unsigned_tok'],
   va_arg_expression => ['va_arg_op','lbrack','expr','comma','type','rbrack'],
   va_list_type_spec => ['n1'],
   void_type_spec => ['void_tok'],
   volatile_type_qualifier => ['volatile_tok'],
   wchar_constant => ['token'],
   wchar_type_spec => ['wchar_tok'],
   while_statement => ['while_tok','lbrack','cond','rbrack','stmt'],
   xor_assign => ['lhs','op','rhs'],
}

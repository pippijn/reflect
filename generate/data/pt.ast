# vim:ft=perl

$main::dataname = 'pt';

{
   add => ['lhs','op','rhs'],
   add_assign => ['lhs','op','rhs'],
   address_of => ['op','expr'],
   and_assign => ['lhs','op','rhs'],
   array_abstract_declarator => [['decl'],'lsqbrack',['expr'],'rsqbrack'],
   array_access => ['lhs','lsqbrack','rhs','rsqbrack'],
   assign => ['lhs','op','rhs'],
   auto_str_class_spec => ['n1'],
   bitwise_and => ['lhs','op','rhs'],
   bitwise_negate => ['op','expr'],
   bitwise_or => ['lhs','op','rhs'],
   bitwise_xor => ['lhs','op','rhs'],
   bracket_expression => ['lbrack','expr','rbrack'],
   bracketed_initialiser_list => ['lbrack',['list'],['comma'],'rbrack'],
   break_statement => ['break_tok','semi'],
   case_label_statement => ['case_tok','expr','semi'],
   char_constant => ['n1'],
   char_type_spec => ['n1'],
   compound_literal => ['lbrack','type','rbrack','init_list'],
   compound_statement => ['lbrace',['decls'],['stmts'],'rbrace'],
   const_pointer_type_qualifier => ['n1'],
   const_type_qualifier => ['n1'],
   constant => ['constant'],
   continue_statement => ['continue_tok','semi'],
   default_label_statement => ['default_tok','semi'],
   divide => ['lhs','op','rhs'],
   divide_assign => ['lhs','op','rhs'],
   do_statement => ['do_tok','stmt','while_tok','lbrack','cond','rbrack','semi'],
   double_type_spec => ['n1'],
   enum_specifier => ['enum_tok',['tag'],['lbrace'],['enums'],['comma'],['rbrace']],
   equals => ['lhs','op','rhs'],
   extern_str_class_spec => ['n1'],
   float_type_spec => ['n1'],
   floating_constant => ['n1'],
   fmt1 => ['n1','n2'],
   fmt10 => ['n1','n2','n3','n4','n5','n6'],
   fmt100 => ['n1'],
   fmt101 => ['n1','n2','n3'],
   fmt102 => ['n1'],
   fmt103 => ['n1','n2','n3'],
   fmt104 => ['n1','n2','n3','n4'],
   fmt105 => ['n1','n2','n3','n4'],
   fmt106 => ['n1','n2','n3'],
   fmt107 => ['n1','n2','n3','n4'],
   fmt108 => ['n1'],
   fmt109 => ['n1','n2','n3'],
   fmt11 => ['n1','n2','n3','n4','n5'],
   fmt110 => ['n1'],
   fmt111 => ['n1'],
   fmt112 => ['n1'],
   fmt113 => ['n1','n2'],
   fmt114 => ['n1'],
   fmt115 => ['n1'],
   fmt116 => ['n1'],
   fmt117 => ['n1'],
   fmt118 => ['n1'],
   fmt119 => ['n1','n2'],
   fmt12 => ['n1','n2','n3','n4','n5','n6'],
   fmt120 => ['n1'],
   fmt121 => ['n1','n2','n3'],
   fmt123 => ['n1','n2','n3','n4'],
   fmt125 => ['n1','n2','n3','n4'],
   fmt126 => ['n1','n2','n3','n4','n5'],
   fmt127 => ['n1','n2','n3','n4','n5','n6'],
   fmt128 => ['n1'],
   fmt129 => ['n1'],
   fmt13 => ['n1','n2','n3','n4','n5','n6'],
   fmt133 => ['n1'],
   fmt134 => ['n1','n2','n3'],
   fmt135 => ['n1'],
   fmt136 => ['n1','n2','n3'],
   fmt137 => ['n1'],
   fmt138 => ['n1','n2','n3'],
   fmt139 => ['n1','n2'],
   fmt14 => ['n1','n2','n3','n4'],
   fmt140 => ['n1','n2','n3'],
   fmt141 => ['n1','n2','n3'],
   fmt142 => ['n1','n2','n3'],
   fmt143 => ['n1','n2'],
   fmt144 => ['n1','n2','n3'],
   fmt145 => ['n1','n2','n3','n4'],
   fmt146 => ['n1','n2','n3'],
   fmt15 => ['n1','n2','n3','n4'],
   fmt151 => ['n1'],
   fmt152 => ['n1','n2'],
   fmt153 => ['n1','n2'],
   fmt154 => ['n1','n2','n3'],
   fmt155 => ['n1','n2','n3'],
   fmt156 => ['n1','n2'],
   fmt157 => ['n1','n2','n3'],
   fmt158 => ['n1','n2','n3'],
   fmt159 => ['n1'],
   fmt16 => ['n1','n2','n3','n4','n5'],
   fmt160 => ['n1','n2'],
   fmt161 => ['n1'],
   fmt162 => ['n1'],
   fmt163 => ['n1','n2'],
   fmt164 => ['n1','n2'],
   fmt165 => ['n1','n2','n3','n4','n5','n6'],
   fmt166 => ['n1','n2'],
   fmt167 => ['n1','n2','n3'],
   fmt168 => ['n1','n2','n3'],
   fmt169 => ['n1','n2','n3','n4','n5','n6'],
   fmt17 => ['n1'],
   fmt170 => ['n1','n2','n3'],
   fmt171 => ['n1','n2','n3','n4'],
   fmt172 => ['n1','n2','n3','n4'],
   fmt173 => ['n1','n2','n3','n4'],
   fmt174 => ['n1','n2','n3','n4'],
   fmt175 => ['n1'],
   fmt18 => ['n1'],
   fmt180 => ['n1'],
   fmt19 => ['n1'],
   fmt190 => ['n1'],
   fmt191 => ['n1','n2','n3'],
   fmt192 => ['n1'],
   fmt2 => ['n1','n2'],
   fmt20 => ['n1'],
   fmt204 => ['n1'],
   fmt207 => ['n1'],
   fmt21 => ['n1','n2'],
   fmt211 => ['n1'],
   fmt214 => ['n1'],
   fmt217 => ['n1'],
   fmt22 => ['n1','n2'],
   fmt222 => ['n1'],
   fmt225 => ['n1'],
   fmt227 => ['n1'],
   fmt229 => ['n1'],
   fmt23 => ['n1','n2'],
   fmt231 => ['n1'],
   fmt233 => ['n1'],
   fmt235 => ['n1'],
   fmt238 => ['n1'],
   fmt24 => ['n1','n2'],
   fmt25 => ['n1','n2'],
   fmt250 => ['n1'],
   fmt251 => ['n1'],
   fmt252 => ['n1','n2','n3'],
   fmt253 => ['n1'],
   fmt254 => ['n1'],
   fmt26 => ['n1','n2','n3'],
   fmt27 => ['n1','n2'],
   fmt28 => ['n1','n2'],
   fmt282 => ['n1'],
   fmt283 => ['n1'],
   fmt284 => ['n1'],
   fmt285 => ['n1'],
   fmt286 => ['n1'],
   fmt287 => ['n1'],
   fmt29 => ['n1','n2'],
   fmt296 => ['n1'],
   fmt297 => ['n1','n2'],
   fmt298 => ['n1'],
   fmt299 => ['n1','n2'],
   fmt3 => ['n1','n2'],
   fmt30 => ['n1','n2'],
   fmt300 => ['n1','n2'],
   fmt31 => ['n1','n2'],
   fmt317 => ['n1'],
   fmt318 => ['n1'],
   fmt319 => ['n1','n2'],
   fmt32 => ['n1','n2','n3','n4'],
   fmt320 => ['n1','n2','n3'],
   fmt321 => ['n1','n2'],
   fmt322 => ['n1','n2'],
   fmt323 => ['n1','n2'],
   fmt324 => ['n1','n2','n3'],
   fmt325 => ['n1','n2'],
   fmt326 => ['n1','n2','n3'],
   fmt327 => ['n1','n2','n3'],
   fmt328 => ['n1','n2','n3'],
   fmt329 => ['n1','n2','n3'],
   fmt33 => ['n1','n2'],
   fmt330 => ['n1'],
   fmt331 => ['n1'],
   fmt332 => ['n1','n2'],
   fmt336 => ['n1','n2'],
   fmt337 => ['n1','n2','n3','n4'],
   fmt338 => ['n1'],
   fmt339 => ['n1','n2'],
   fmt34 => ['n1'],
   fmt340 => ['n1'],
   fmt341 => ['n1'],
   fmt342 => ['n1','n2'],
   fmt343 => ['n1','n2'],
   fmt344 => ['n1'],
   fmt345 => ['n1'],
   fmt346 => ['n1'],
   fmt347 => ['n1'],
   fmt348 => ['n1','n2'],
   fmt349 => ['n1','n2','n3','n4'],
   fmt35 => ['n1'],
   fmt350 => ['n1'],
   fmt351 => ['n1','n2','n3','n4','n5'],
   fmt352 => ['n1','n2','n3','n4','n5','n6','n7'],
   fmt353 => ['n1','n2','n3','n4','n5','n6','n7','n8','n9'],
   fmt354 => ['n1','n2','n3','n4','n5','n6','n7','n8','n9','n10','n11'],
   fmt355 => ['n1','n2','n3','n4','n5','n6'],
   fmt356 => ['n1','n2','n3','n4','n5','n6','n7','n8'],
   fmt357 => ['n1','n2','n3','n4','n5','n6','n7','n8','n9','n10'],
   fmt358 => ['n1','n2','n3','n4','n5','n6','n7','n8','n9','n10','n11','n12'],
   fmt359 => ['n1'],
   fmt36 => ['n1'],
   fmt360 => ['n1'],
   fmt361 => ['n1','n2','n3','n4'],
   fmt362 => ['n1'],
   fmt363 => ['n1'],
   fmt364 => ['n1','n2','n3'],
   fmt365 => ['n1','n2','n3','n4'],
   fmt366 => ['n1'],
   fmt367 => ['n1','n2','n3'],
   fmt368 => ['n1'],
   fmt369 => ['n1'],
   fmt37 => ['n1'],
   fmt370 => ['n1'],
   fmt371 => ['n1','n2'],
   fmt372 => ['n1','n2','n3','n4','n5','n6'],
   fmt373 => ['n1'],
   fmt374 => ['n1','n2','n3'],
   fmt375 => ['n1'],
   fmt376 => ['n1'],
   fmt377 => ['n1','n2','n3','n4'],
   fmt378 => ['n1','n2','n3','n4','n5','n6'],
   fmt379 => ['n1','n2','n3','n4'],
   fmt38 => ['n1'],
   fmt380 => ['n1','n2','n3','n4','n5'],
   fmt381 => ['n1','n2','n3','n4','n5','n6'],
   fmt382 => ['n1','n2'],
   fmt383 => ['n1','n2'],
   fmt384 => ['n1','n2'],
   fmt385 => ['n1','n2'],
   fmt386 => ['n1'],
   fmt387 => ['n1'],
   fmt388 => ['n1'],
   fmt389 => ['n1'],
   fmt39 => ['n1'],
   fmt390 => ['n1','n2','n3','n4'],
   fmt391 => ['n1','n2','n3','n4','n5'],
   fmt392 => ['n1','n2','n3','n4'],
   fmt393 => ['n1','n2','n3','n4','n5','n6'],
   fmt394 => ['n1'],
   fmt4 => ['n1','n2'],
   fmt40 => ['n1'],
   fmt41 => ['n1','n2'],
   fmt42 => ['n1','n2'],
   fmt43 => ['n1','n2'],
   fmt44 => ['n1'],
   fmt45 => ['n1','n2'],
   fmt46 => ['n1','n2'],
   fmt47 => ['n1'],
   fmt48 => ['n1','n2'],
   fmt49 => ['n1','n2'],
   fmt5 => ['n1','n2','n3'],
   fmt50 => ['n1'],
   fmt51 => ['n1','n2'],
   fmt52 => ['n1'],
   fmt53 => ['n1','n2'],
   fmt54 => ['n1'],
   fmt55 => ['n1'],
   fmt56 => ['n1'],
   fmt57 => ['n1'],
   fmt58 => ['n1'],
   fmt59 => ['n1'],
   fmt6 => ['n1','n2','n3','n4'],
   fmt60 => ['n1'],
   fmt61 => ['n1','n2','n3'],
   fmt62 => ['n1','n2','n3','n4','n5'],
   fmt63 => ['n1','n2','n3','n4','n5','n6'],
   fmt64 => ['n1','n2','n3','n4'],
   fmt65 => ['n1','n2','n3'],
   fmt66 => ['n1','n2','n3','n4'],
   fmt67 => ['n1','n2','n3','n4'],
   fmt68 => ['n1'],
   fmt69 => ['n1','n2','n3'],
   fmt7 => ['n1','n2','n3'],
   fmt70 => ['n1'],
   fmt71 => ['n1','n2'],
   fmt72 => ['n1'],
   fmt73 => ['n1'],
   fmt74 => ['n1','n2','n3'],
   fmt75 => ['n1','n2','n3','n4'],
   fmt76 => ['n1','n2','n3'],
   fmt77 => ['n1','n2','n3','n4'],
   fmt78 => ['n1'],
   fmt79 => ['n1'],
   fmt8 => ['n1','n2','n3','n4'],
   fmt80 => ['n1'],
   fmt85 => ['n1','n2','n3'],
   fmt86 => ['n1','n2','n3'],
   fmt87 => ['n1','n2','n3'],
   fmt88 => ['n1','n2','n3','n4'],
   fmt89 => ['n1'],
   fmt9 => ['n1','n2','n3','n4','n5'],
   fmt90 => ['n1','n2'],
   fmt91 => ['n1','n2','n3'],
   fmt92 => ['n1'],
   fmt93 => ['n1'],
   fmt94 => ['n1'],
   fmt95 => ['n1','n2','n3'],
   fmt96 => ['n1','n2','n3','n4'],
   fmt97 => ['n1','n2'],
   fmt98 => ['n1','n2','n3'],
   fmt99 => ['n1','n2','n3','n4'],
   for_statement => ['for_tok','lbrack','init','init_semi','cond','cond_semi','inc','rbrack','stmt'],
   function_call => ['lhs','lbrack',['args'],'rbrack'],
   goto_statement => ['goto_tok','label','semi'],
   greater_than => ['lhs','op','rhs'],
   greater_than_equals => ['lhs','op','rhs'],
   hex_constant => ['n1'],
   if_statement => ['if_tok','lbrack','cond','rbrack','then_stmt',['else_tok'],['else_stmt']],
   int_type_spec => ['n1'],
   integer_constant => ['n1'],
   label_statement => ['label','semi'],
   left_shift_assign => ['lhs','op','rhs'],
   less_than => ['lhs','op','rhs'],
   less_than_equals => ['lhs','op','rhs'],
   logical_and => ['lhs','op','rhs'],
   logical_not => ['op','expr'],
   logical_or => ['lhs','op','rhs'],
   long_type_spec => ['n1'],
   modulo => ['lhs','op','rhs'],
   modulo_assign => ['lhs','op','rhs'],
   multiply => ['lhs','op','rhs'],
   multiply_assign => ['lhs','op','rhs'],
   negate => ['op','expr'],
   not_equals => ['lhs','op','rhs'],
   octal_constant => ['n1'],
   or_assign => ['lhs','op','rhs'],
   pointer => ['n1','n2',['n3'],['n4']],
   pointer_access => ['lhs','op','member'],
   pointer_dereference => ['op','expr'],
   positive => ['op','expr'],
   post_decrement => ['expr','op'],
   post_increment => ['expr','op'],
   pre_decrement => ['op','expr'],
   pre_increment => ['op','expr'],
   register_str_class_spec => ['n1'],
   return_statement => ['return_tok','expr','semi'],
   right_shift_assign => ['lhs','op','rhs'],
   shift_left => ['lhs','op','rhs'],
   shift_right => ['lhs','op','rhs'],
   short_type_spec => ['n1'],
   signer_type_spec => ['n1'],
   sizeof_type => ['op','lbrack','expr','rbrack'],
   sizeof_var => ['op','expr'],
   static_str_class_spec => ['n1'],
   string_literal => ['list'],
   string_literal_list => [['n1'],'n2'],
   struct_access => ['lhs','op','member'],
   struct_or_union_specifier => ['sudcl',['id'],['lbrace'],['fields'],['rbrace']],
   subtract => ['lhs','op','rhs'],
   subtract_assign => ['lhs','op','rhs'],
   switch_statement => ['switch_tok','lbrack','expr','rbrack','stmt'],
   ternary_op => ['cond','qmark',['then_expr'],'colon','else_expr'],
   type_cast => ['lbrack','type','rbrack','expr'],
   typedef_str_class_spec => ['n1'],
   unsigned_type_spec => ['n1'],
   variable => ['id'],
   void_type_spec => ['n1'],
   volatile_pointer_type_qualifier => ['n1'],
   volatile_type_qualifier => ['n1'],
   wchar_constant => ['n1'],
   wchar_type_spec => ['n1'],
   while_statement => ['while_tok','lbrack','cond','rbrack','stmt'],
   xor_assign => ['lhs','op','rhs'],
}
